PDO = PHP Data Objects
специальная библиотека, которая входит в состав PHP,
всегда доступна и не нужно её подключать
предоставляет надёжный способ работы с базой
работа с базой идёт в объектном стиле

Требования, котрые обычно предъявляются к модели:
должна выполнять следующие функции:

- инкапсулировать в себе подключение к БД
модель и никто кроме модели не должен работать с базой данных
желательно, чтобы другие части приложения ничего не знали о базе данных как таковой,
только лишь работали с моделями

- выборка нужных данных из таблиц

- Операции CRUD: create, read, update, delete
любая админ панель строится на этой четвёрке операций
именно модель должна содержать в себе методы для этой четвёрки операций

- оптимально: быть реализацией концепций ActiveRecord и ORM

------------------------------------------------------------------------------

ORM = Object-Relational Mapping
один из очень важных архитектурных паттернов, т.е. шаблонов проектирования

мы должны работать не с записями в базе данных, а с объектами своего языка, в частности php

- если я хочу создать новость в базе данных,
я не должен это делать,
я должен создать  объект класса новость,
заполнить его нужными данными
и заставить его самого сохраниться в базе
- если я хочу получить из базы список новостей за 20 января прошлого года
я хочу получить не просто вложенный массив, а массив объектов,
т.е. отражение объектов существующих в БД,
на объекты нашего с вами языка программирования

В последнее время принято несколько условностей, несколько принципов:
- Класс это отражение таблицы в базе данных
(если в БД есть таблица с новостями, то у нас должен быть некий класс новостей,
который соответствует этой таблицце тем или иным образом)
- Методы класса (статические методы) работают с таблицей в целом. Например - выбирают из неё данные.
- Объект - отражение одной записи в таблице
- Методы объекта (динамические методы) работают с отдельными записями. ( Например.
модифицируют и сохраняют данные. Например метод сейв.)

--------------------------------------------------------------------------------

PDO: PHP Data Objects

- это объектный интерфейс к базе данных
(интерфейс как фасад, который скрывает детали подключения к базе данных,
взамен предоставляя удобный объектный интерфейс)
- позволяет пользоваться подготовленными запросами
- избавляет от необходимости экранирования данных
(многие пользовались функцией mysql real escape string  - с PDO это уже не нужно)
- возвращает данные в объектном виде

Примерный план выполнения несложного запроса через PDO

// Подключение к базе данных
$dsn = 'mysql:dbname=test;host=localhost'; // строка подключения к базе данных в спец формате
$dbh = new Pdo($dsn, $user, $password); // новый объект всегда доступного класса Pdo, DataBaseHandler

// Подготовка запроса
$sth = $dbh->prepare(
    "SELECT * FROM news WHERE id=:id"
    );
(подготовленный запрос иначе называется statement)

// Выполнение запроса с подстановкой
$sth->execute([':id' => 1]);
(токен - двоеточие и название, состоящее из латинских букв;
в этом примере токен назван также как поле в базе)

// Получение результата запроса (все строки)
$result = $sth->fetchAll()
(если писать $sth->fetchAll(PDO::FETCH_CLASS);
то всё вернётся в ввиде не массива но объекта
так мы задаём метод обработки тех данных, которые вернулись нам из БД)
(метод fetch() вернёт одну запись, просто одномерный массив)

--------------------------------------------------------------
Работая с PDO можно передавать всё из одного метода в другой
$dbh это объект,
- его можно записать в свойства своего класса
- его можно передать в какую-то другую функцию и т.д.
$sth запрос подготовленный к выполнению это тоже объект,
- его можно сохранить и использовать в другом месте

Интерфейс

Интерфейс очень похож на абстрактный класс, но им не является.

- это "контракт", который подписавшиеся классы обязаны реализовать (реализовать методы, записанные в интерфейсе)
- похож на абстрактный класс
- определяется ключевым словом interface
- в классе подключается с помощью слова implements
- несет в себе описание методов, список методов, которые обязан реализовать подписавшийся класс
(иначе фатальная ошибка)
- один класс может реализовать несколько интерфейсов - в этом отличие интерфейсов от абстрактных классов

Допустим, мы планируем в нашей системе иметь несколько моделей (новости, редакционные статьи, еще что-то),
 и предполагаем, что у всех этих моделей должны быть примерно одинаковые методы,
 вот хотя бы getAll().
Имена интерфейсов принято начинать с заглавной буквы ай I

Реализация нескольких интерфейсов - пример ограниченного множественного наследования.

Если у двух реализуемых интерфейсов есть одинаковые методы, ничего плохого не происходит.
Реального метода нет, есть только его заголовок.

О класс хинтинге. Пусть функция подводит статистику по авторам. в енё могут ыбть переданы совершенно разные
объекты, у которых есть авторы. внутри мы с эти м объектом что-то жделаем. Мы хотим точно знать,
что туда будут переданы только те объекты, которые с авторами работают. Содержат автора в себе.
function statAuthors(IHasAuthor $obj) {}
Такой записью мы гарантируем, что туда попадуть только те объекты, которые гарантированно реализуют интерфейс
IHasAuthor.
Если попадёт какой-то другой объект, будет вызвана ошибка.

В интерфейсах все методы должны быть публичными.

Еще отличие интерфейса от абстрактного класса.
В абстрактном классе некоторые методы могут быть абстрактными, а некоторые конкретными.
 И тогда класс, наследующий абстрактный, получит их реализацию в наследство.
В интерфейсе не может быть реализации метода, только заголовки.

Для собеседований по php
Чем отличается интерфейс от абстрактного класса
и почему обе эти сущности нужны.
1) В абстракном классе может быть реализация (конкретный код, который можно потом унаследовать)
2) Класс может реализовывать несколько интерфейсов (некоторая замена множественного наследования)
Поэтому обе эти сущности имеют правно на существование.

в Php существуют стандартные интерфейсы.